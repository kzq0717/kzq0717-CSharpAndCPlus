// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#ifndef WINRT_rt_CPlusToCSharp_0_H
#define WINRT_rt_CPlusToCSharp_0_H
WINRT_EXPORT namespace winrt::Windows::Foundation
{
    template <typename T> struct __declspec(empty_bases) EventHandler;
    struct EventRegistrationToken;
}
WINRT_EXPORT namespace winrt::rt_CPlusToCSharp
{
    struct ITest;
    struct Test;
}
namespace winrt::impl
{
    template <> struct category<winrt::rt_CPlusToCSharp::ITest>{ using type = interface_category; };
    template <> struct category<winrt::rt_CPlusToCSharp::Test>{ using type = class_category; };
    template <> inline constexpr auto& name_v<winrt::rt_CPlusToCSharp::Test> = L"rt_CPlusToCSharp.Test";
    template <> inline constexpr auto& name_v<winrt::rt_CPlusToCSharp::ITest> = L"rt_CPlusToCSharp.ITest";
    template <> inline constexpr guid guid_v<winrt::rt_CPlusToCSharp::ITest>{ 0xE178529A,0xDA40,0x5DC6,{ 0x8B,0x0D,0xE4,0xB5,0x60,0x9A,0x68,0x20 } }; // E178529A-DA40-5DC6-8B0D-E4B5609A6820
    template <> struct default_interface<winrt::rt_CPlusToCSharp::Test>{ using type = winrt::rt_CPlusToCSharp::ITest; };
    template <> struct abi<winrt::rt_CPlusToCSharp::ITest>
    {
        struct __declspec(novtable) type : inspectable_abi
        {
            virtual int32_t __stdcall get_MyProperty(int32_t*) noexcept = 0;
            virtual int32_t __stdcall put_MyProperty(int32_t) noexcept = 0;
            virtual int32_t __stdcall add_TestEvent(void*, winrt::event_token*) noexcept = 0;
            virtual int32_t __stdcall remove_TestEvent(winrt::event_token) noexcept = 0;
        };
    };
    template <typename D>
    struct consume_rt_CPlusToCSharp_ITest
    {
        [[nodiscard]] WINRT_IMPL_AUTO(int32_t) MyProperty() const;
        WINRT_IMPL_AUTO(void) MyProperty(int32_t value) const;
        WINRT_IMPL_AUTO(winrt::event_token) TestEvent(winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const;
        using TestEvent_revoker = impl::event_revoker<winrt::rt_CPlusToCSharp::ITest, &impl::abi_t<winrt::rt_CPlusToCSharp::ITest>::remove_TestEvent>;
        [[nodiscard]] TestEvent_revoker TestEvent(auto_revoke_t, winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const;
        WINRT_IMPL_AUTO(void) TestEvent(winrt::event_token const& token) const noexcept;
    };
    template <> struct consume<winrt::rt_CPlusToCSharp::ITest>
    {
        template <typename D> using type = consume_rt_CPlusToCSharp_ITest<D>;
    };
}
#endif
