// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.211028.7

#pragma once
#ifndef WINRT_rt_CPlusToCSharp_H
#define WINRT_rt_CPlusToCSharp_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.211028.7"), "Mismatched C++/WinRT headers.");
#define CPPWINRT_VERSION "2.0.211028.7"
#include "winrt/impl/Windows.Foundation.2.h"
#include "winrt/impl/rt_CPlusToCSharp.2.h"
namespace winrt::impl
{
    template <typename D> WINRT_IMPL_AUTO(int32_t) consume_rt_CPlusToCSharp_ITest<D>::MyProperty() const
    {
        int32_t value{};
        check_hresult(WINRT_IMPL_SHIM(winrt::rt_CPlusToCSharp::ITest)->get_MyProperty(&value));
        return value;
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_rt_CPlusToCSharp_ITest<D>::MyProperty(int32_t value) const
    {
        check_hresult(WINRT_IMPL_SHIM(winrt::rt_CPlusToCSharp::ITest)->put_MyProperty(value));
    }
    template <typename D> WINRT_IMPL_AUTO(winrt::event_token) consume_rt_CPlusToCSharp_ITest<D>::TestEvent(winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const
    {
        winrt::event_token token{};
        check_hresult(WINRT_IMPL_SHIM(winrt::rt_CPlusToCSharp::ITest)->add_TestEvent(*(void**)(&handler), put_abi(token)));
        return token;
    }
    template <typename D> typename consume_rt_CPlusToCSharp_ITest<D>::TestEvent_revoker consume_rt_CPlusToCSharp_ITest<D>::TestEvent(auto_revoke_t, winrt::Windows::Foundation::EventHandler<int32_t> const& handler) const
    {
        return impl::make_event_revoker<D, TestEvent_revoker>(this, TestEvent(handler));
    }
    template <typename D> WINRT_IMPL_AUTO(void) consume_rt_CPlusToCSharp_ITest<D>::TestEvent(winrt::event_token const& token) const noexcept
    {
        WINRT_IMPL_SHIM(winrt::rt_CPlusToCSharp::ITest)->remove_TestEvent(impl::bind_in(token));
    }
    template <typename D>
    struct produce<D, winrt::rt_CPlusToCSharp::ITest> : produce_base<D, winrt::rt_CPlusToCSharp::ITest>
    {
        int32_t __stdcall get_MyProperty(int32_t* value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            *value = detach_from<int32_t>(this->shim().MyProperty());
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall put_MyProperty(int32_t value) noexcept final try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().MyProperty(value);
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall add_TestEvent(void* handler, winrt::event_token* token) noexcept final try
        {
            zero_abi<winrt::event_token>(token);
            typename D::abi_guard guard(this->shim());
            *token = detach_from<winrt::event_token>(this->shim().TestEvent(*reinterpret_cast<winrt::Windows::Foundation::EventHandler<int32_t> const*>(&handler)));
            return 0;
        }
        catch (...) { return to_hresult(); }
        int32_t __stdcall remove_TestEvent(winrt::event_token token) noexcept final
        {
            typename D::abi_guard guard(this->shim());
            this->shim().TestEvent(*reinterpret_cast<winrt::event_token const*>(&token));
            return 0;
        }
    };
}
WINRT_EXPORT namespace winrt::rt_CPlusToCSharp
{
}
namespace std
{
#ifndef WINRT_LEAN_AND_MEAN
    template<> struct hash<winrt::rt_CPlusToCSharp::ITest> : winrt::impl::hash_base {};
    template<> struct hash<winrt::rt_CPlusToCSharp::Test> : winrt::impl::hash_base {};
#endif
#ifdef __cpp_lib_format
#endif
}
#endif
